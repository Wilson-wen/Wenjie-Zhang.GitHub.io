重写（Override）
重写是子类对父类的永续访问的方法的实现过程进行重新编写，返回值和形参不能改变，即外壳不变，核心重写
规则
1、参数列表与被重写的方法的参数列表必须完全相同；
2、返回类与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类；
3、访问权限不能比父类中被重写的方法的访问权限更低；
4、父类中的成员方法只能被他的子类重写；
5、声明为final的方法不能被重写；
6、声明static的方法不能被重写，但是能够被再次声明；
7、子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法；
8、子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法；
9、重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以；
10、构造方法不能被重写；
11、如果不能继承一个类，则不能重写该类的方法。

重载（Overload）
重载是在一个类里边，方法名相同，而参数不同，返回类型可以相同也可以不相同
每个重载的方法都必须有一个独一无二的参数类型列表
规则
被重载的方法必须改变参数列表(参数个数或类型不一样)；
被重载的方法可以改变返回类型；
被重载的方法可以改变访问修饰符；
被重载的方法可以声明新的或更广的检查异常；
方法能够在同一个类中或者在一个子类中被重载。
无法以返回值类型作为重载函数的区分标准。


重写和重载的区别
参数列表   重载必须修改   重写一定不能修改
返回类型   重载可以修改   重写一定不能修改
异常       重载可以修改   重写可以减少或删除，但是不能抛出新的或者更广的异常
访问       重载可以修改   重写一定不能做更严格的限制（可以降低限度）


总结
方法的重写和重载是java多态性的不同表现，重写是父类与子类之间的多态性的一种表现，重载可以理解成多态性的具体表现形式
1、方法的重载是一个类中定义了多个方法名相同，而他们的参数的数量不同或者数量相同而类型和次序不同，则称之为方法的重载。
2、方法的重写是在子类存在方法与父类的方法的名字相同，而且参数的个数与类型一样返回值也一样的方法，称之为方法的重写。
3、方法的重载是一个类的多态性表现，而方法的重写是子类与父类的一种多态性表现形式。
